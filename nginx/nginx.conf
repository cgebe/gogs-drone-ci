http {


    ### Redirect HTTP to HTTPS

    server {
        listen 80;
        server_name 46.101.223.213;
        return 301 https://$server_name$request_uri;
    }


    ### Gogs Server SSL Config ###

    upstream gogs-server {
        server gogs:3000;
    }

    server {
        listen 443 ssl;
        server_name 46.101.223.213;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        location / {
            proxy_pass http://gogs-server;
            proxy_set_header X-Real-IP  $remote_addr; # pass on real client IP
        }
    }


    ### Drone Server SSL Config ###

    upstream drone-server {
        server drone-master:8000;
    }

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    server {
        listen 8443 ssl;
        server_name 46.101.223.213;

        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # preventing mitm attack
        add_header Strict-Transport-Security "max-age=315360000";

        location / {
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;

            proxy_pass http://drone-server;
            proxy_redirect off;
            proxy_http_version 1.1;
            proxy_buffering off;

            chunked_transfer_encoding off;
        }

        location ~* /ws {
            proxy_pass http://drone-server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
        }
    }


    ### Docker Registry SSL Config ###

    upstream docker-registry {
        server registry:5000;
    }

    server {
        listen 5443 ssl;
        server_name 46.101.223.213;

        # SSL
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # disable any limits to avoid HTTP 413 for large image uploads
        client_max_body_size 0;

        # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
        chunked_transfer_encoding on;

        location /v2/ {
            # Do not allow connections from docker 1.5 and earlier
            # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
            if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
                return 404;
            }

            # To add basic authentication to v2 use auth_basic setting plus add_header
            auth_basic "registry.localhost";
            auth_basic_user_file /etc/nginx/auth/registry.password;
            add_header 'Docker-Distribution-Api-Version' 'registry/2.0' always;

            proxy_pass                          http://docker-registry;
            proxy_set_header  Host              $http_host;   # required for docker client's sake
            proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
            proxy_read_timeout                  900;
        }
    }
}

events {
    worker_connections 1024;
}
